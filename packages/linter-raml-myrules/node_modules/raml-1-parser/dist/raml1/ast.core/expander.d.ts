/// <reference path="../../../typings/main.d.ts" />
import ll = require("../lowLevelAST");
import hl = require("../highLevelAST");
import hlimpl = require("../highLevelImpl");
import yaml = require("yaml-ast-parser");
import proxy = require("./LowLevelASTProxy");
import RamlWrapper = require("../artifacts/raml10parserapi");
import RamlWrapper08 = require("../artifacts/raml08parserapi");
export declare function expandTraitsAndResourceTypes<T>(api: T): T;
export declare function mergeAPIs(masterUnit: ll.ICompilationUnit, extensionsAndOverlays: ll.ICompilationUnit[], mergeMode: hlimpl.OverlayMergeMode): hl.IHighLevelNode;
export declare function getTransformNames(): string[];
export declare function getTransformerForOccurence(occurence: string): any;
export declare class ValueTransformer implements proxy.ValueTransformer {
    templateKind: string;
    templateName: string;
    params: {
        [key: string]: string;
    };
    structuredParams: {
        [key: string]: ll.ILowLevelASTNode;
    };
    constructor(templateKind: string, templateName: string, params?: {
        [key: string]: string;
    }, structuredParams?: {
        [key: string]: ll.ILowLevelASTNode;
    });
    transform(obj: any, toString?: boolean): {
        value: any;
        errors: hl.ValidationIssue[];
    };
    children(node: ll.ILowLevelASTNode): ll.ILowLevelASTNode[];
    valueKind(node: ll.ILowLevelASTNode): yaml.Kind;
    private substitutionNode(node);
    private paramName(node);
}
export declare class DefaultTransformer extends ValueTransformer {
    constructor(owner: RamlWrapper.ResourceBase | RamlWrapper.MethodBase | RamlWrapper08.Resource | RamlWrapper08.MethodBase, delegate: ValueTransformer);
    owner: RamlWrapper.ResourceBase | RamlWrapper.MethodBase | RamlWrapper08.Resource | RamlWrapper08.MethodBase;
    delegate: ValueTransformer;
    transform(obj: any, toString?: boolean): any;
    private initParams();
    children(node: ll.ILowLevelASTNode): ll.ILowLevelASTNode[];
    valueKind(node: ll.ILowLevelASTNode): yaml.Kind;
}
