"use strict";
var path = require('path');
var URL = require('url');
var util = require("./index");
var resourceRegistry = require("../raml1/jsyaml/resourceRegistry");
var ContentProvider = (function () {
    function ContentProvider(unit) {
        this.unit = unit;
    }
    ContentProvider.prototype.contextPath = function () {
        if (!this.unit) {
            return "";
        }
        var rootPath = this.unit.absolutePath();
        return rootPath || "";
    };
    ContentProvider.prototype.normalizePath = function (url) {
        if (!url) {
            return url;
        }
        var result;
        if (!isWebPath(url)) {
            result = path.normalize(url);
        }
        else {
            var prefix = url.toLowerCase().indexOf('https') === 0 ? 'https://' : 'http://';
            result = prefix + path.normalize(url.substring(prefix.length));
        }
        return result;
    };
    ContentProvider.prototype.content = function (reference) {
        var normalized = this.normalizePath(reference);
        if (path.isAbsolute(normalized) && !isWebPath(normalized)) {
            normalized = path.relative(path.dirname(this.unit.absolutePath()), normalized);
        }
        var unit = this.unit.resolve(normalized);
        if (!unit) {
            return "";
        }
        return unit.contents() || "";
    };
    ContentProvider.prototype.contentAsync = function (reference) {
        var absolutePath = this.normalizePath(reference);
        var unitPromise = this.unit.resolveAsync(absolutePath);
        if (!unitPromise) {
            return Promise.resolve("");
        }
        var result = unitPromise.then(function (unit) {
            return (unit && unit.contents()) || "";
        });
        return result;
    };
    ContentProvider.prototype.hasAsyncRequests = function () {
        return resourceRegistry.hasAsyncRequests();
    };
    ContentProvider.prototype.resolvePath = function (context, relativePath) {
        if (!relativePath || !context) {
            return relativePath;
        }
        var result;
        if (!isWebPath(context)) {
            result = path.resolve(path.dirname(context), relativePath);
        }
        else {
            result = URL.resolve(context, relativePath);
        }
        return result;
    };
    ContentProvider.prototype.isAbsolutePath = function (uri) {
        if (!uri) {
            return false;
        }
        if (isWebPath(uri)) {
            return true;
        }
        return path.isAbsolute(uri);
    };
    ContentProvider.prototype.promiseResolve = function (arg) {
        return Promise.resolve(arg);
    };
    return ContentProvider;
}());
exports.ContentProvider = ContentProvider;
function isWebPath(str) {
    if (str == null)
        return false;
    return util.stringStartsWith(str, "http://") || util.stringStartsWith(str, "https://");
}
//# sourceMappingURL=contentprovider.js.map